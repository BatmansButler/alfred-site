{"version":3,"sources":["auth.js","SectionsRenderer.js","externalCallStructuresHelper.js","Form.js","App.js","index.js"],"names":["instanceNameEnv","process","OPENLAW_INSTANCE_NAME","INSTANCE_URL","toLowerCase","apiClientSingleton","APIClient","SectionsRenderer","children","sectionName","sectionCount","index","activeIndex","setActiveIndex","useState","show","setShow","showBackButton","showNextButton","showDoneButton","Modal","size","key","aria-labelledby","centered","length","renderTrigger","className","tabIndex","ModalHeader","ModalTitle","id","ModalBody","ModalFooter","Button","variant","onClick","ABIString","serviceName","SampleTemplateText","onValidate","validationResult","elementType","eventType","elementName","value","errorMessage","file","name","includes","Form","compiledTemplate","Openlaw","compileTemplate","initialExecutionResult","execute","getExternalCallStructures","executionResult","initialVariables","getExecutedVariables","inputExtraTextMap","state","parameters","variables","onElementChange","undefined","isError","stateLifter","props","mergedParameters","console","error","setState","this","Object","keys","apiClient","onChangeFunction","openLaw","renderSections","SectionsRendererInjecter","sectionTransform","unsectionedTitle","Component","App","formState","liftFormState","previewHTML","setPreviewHTML","view","toggleView","useEffect","callback","agreement","getAgreements","renderForPreview","renderPreviewHTML","dangerouslySetInnerHTML","__html","loginDetails","email","OPENLAW_EMAIL","password","OPENLAW_PASSWORD","login","catch","test","warn","attemptAuth","render","document","getElementById"],"mappings":"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","file":"static/js/main.c88521d9.chunk.js","sourcesContent":["/* global process */\n\nimport { APIClient } from 'openlaw';\n\n// Provide your OPENLAW_INSTANCE_NAME for logging into your OpenLaw instance.\nconst instanceNameEnv = process.env.OPENLAW_INSTANCE_NAME;\nconst INSTANCE_URL = `https://lib.openlaw.io/api/v1/${instanceNameEnv ? instanceNameEnv.toLowerCase() : 'default'}`;\n\nexport const apiClientSingleton = new APIClient(INSTANCE_URL);\n\nexport const attemptAuth = () => {\n  const loginDetails = {\n    email: process.env.OPENLAW_EMAIL || '',\n    password: process.env.OPENLAW_PASSWORD || '',\n  };\n\n  apiClientSingleton\n    .login(loginDetails.email, loginDetails.password)\n    .catch(error => {\n      if (/500/.test(error)) {\n        // eslint-disable-next-line no-undef\n        console.warn('OpenLaw APIClient: Please authenticate to the APIClient if you wish to use the Address input.');\n        return;\n      }\n\n      // eslint-disable-next-line no-undef\n      console.error('OpenLaw APIClient:', error);\n    });\n};\n\n","import React, {useState} from 'react';\nimport {Modal, ModalBody, ModalFooter, ModalTitle, Button} from \"react-bootstrap\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\n\nconst SectionsRenderer = ({children, sectionName, sectionCount, index, activeIndex, setActiveIndex}) => {\n    const goPrev = () => setActiveIndex(activeIndex - 1);\n    const goNext = () => setActiveIndex(activeIndex + 1);\n//TODO this state needs to be stored in the Form\n    const [show, setShow] = useState(true);\n\n    const showBackButton = index > 0;\n    const showNextButton = index < sectionCount - 1;\n    const showDoneButton = index === sectionCount - 1;\n\n    return (\n        <Modal\n            size={\"lg\"}\n            key={`card-${sectionName}`}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            show={show && sectionName.length && index === activeIndex}\n            renderTrigger={() => (\n                <h2 className=\"sectionTrigger\" tabIndex=\"0\">\n                    {`${sectionName}`}\n                </h2>\n            )}>\n            <ModalHeader>\n                <ModalTitle id=\"contained-modal-title-vcenter\">\n                    {`${sectionName}`}\n                </ModalTitle>\n            </ModalHeader>\n            <ModalBody>\n                {children()}\n            </ModalBody>\n            <ModalFooter>\n                {showBackButton && <Button variant=\"secondary\" onClick={goPrev}>&lt; Previous</Button>}\n                {showNextButton && <Button variant=\"primary\" onClick={goNext}>Next &gt;</Button>}\n                {showDoneButton && <Button variant=\"primary\" onClick={() => setShow(false)}>Done</Button>}\n            </ModalFooter>\n        </Modal>\n\n    );\n};\n\nexport default SectionsRenderer;\n","/**\n* External Call Structure Helper\n*\n* Because we are using the variable type `ExternalSignature`\n* in our SAMPLE_TEMPLATE, any example app, or test we write\n* which uses the template needs data for an external call structure argument\n* to `Openlaw.execute()`\n*/\n\nconst ABIString =\n  '{\"input\":{\"typeDefinition\":{\"signerEmail\":{\"name\":\"signerEmail\",\"variableTypeDe'\n  + 'finition\":{\"name\":\"Text\",\"typeParameter\":null},\"description\":null,\"formatter\":nu'\n  + 'll,\"isHidden\":false,\"defaultValue\":null},\"contractContentBase64\":{\"name\":\"contra'\n  + 'ctContentBase64\",\"variableTypeDefinition\":{\"name\":\"Text\",\"typeParameter\":null},\"'\n  + 'description\":null,\"formatter\":null,\"isHidden\":false,\"defaultValue\":null},\"contra'\n  + 'ctTitle\":{\"name\":\"contractTitle\",\"variableTypeDefinition\":{\"name\":\"Text\",\"typePa'\n  + 'rameter\":null},\"description\":null,\"formatter\":null,\"isHidden\":false,\"defaultValu'\n  + 'e\":null}},\"names\":[\"signerEmail\",\"contractContentBase64\",\"contractTitle\"],\"types'\n  + '\":{\"signerEmail\":{\"name\":\"Text\"},\"contractContentBase64\":{\"name\":\"Text\"},\"contra'\n  + 'ctTitle\":{\"name\":\"Text\"}}},\"output\":{\"typeDefinition\":{\"signerEmail\":{\"name\":\"si'\n  + 'gnerEmail\",\"variableTypeDefinition\":{\"name\":\"Text\",\"typeParameter\":null},\"descri'\n  + 'ption\":null,\"formatter\":null,\"isHidden\":false,\"defaultValue\":null},\"signature\":{'\n  + '\"name\":\"signature\",\"variableTypeDefinition\":{\"name\":\"Text\",\"typeParameter\":null}'\n  + ',\"description\":null,\"formatter\":null,\"isHidden\":false,\"defaultValue\":null},\"reco'\n  + 'rdLink\":{\"name\":\"recordLink\",\"variableTypeDefinition\":{\"name\":\"Text\",\"typeParame'\n  + 'ter\":null},\"description\":null,\"formatter\":null,\"isHidden\":false,\"defaultValue\":n'\n  + 'ull}},\"names\":[\"signerEmail\",\"signature\",\"recordLink\"],\"types\":{\"signerEmail\":{\"'\n  + 'name\":\"Text\"},\"signature\":{\"name\":\"Text\"},\"recordLink\":{\"name\":\"Text\"}}}}';\n\nexport default (serviceName = 'DocuSign') => ({ [serviceName]: ABIString });\n","import React, {Component} from 'react';\nimport {Openlaw} from 'openlaw';\n\n/**\n * DO NOT DIRECTLY COPY the lines below;\n *\n * If your app is bundled and using our `esm/ lib,\n * in your app they will become:\n *   import OpenLawForm from 'openlaw-elements';\n *   import 'openlaw-elements/dist/esm/openlaw-elements.min.css';\n */\nimport OpenLawForm from 'openlaw-elements';\nimport './form-style.scss';\n\nimport {apiClientSingleton} from './auth';\nimport SectionsRenderer from './SectionsRenderer';\nimport getExternalCallStructures from './externalCallStructuresHelper.js';\nimport raw from 'raw.macro';\n\nconst SampleTemplateText = raw('./templates/letter-to-heirs.tmpl');\n\n/**\n * Examples of custom validation\n *\n * Return an errorMessage key to provide your own\n * or override & hide a validation error with an empty string.\n *\n * You can also call your other validation handlers, etc. inside here.\n */\nconst onValidate = (validationResult) => {\n    // show custom error message if name is incorrect on blur event\n    if (\n        validationResult.elementType === 'Text'\n        && validationResult.eventType === 'blur'\n        && validationResult.elementName === 'Contestant-Name'\n        && validationResult.value !== 'Smoky'\n    ) {\n        return {\n            errorMessage: 'Please, only participants with the name \"Smoky\" can enter.',\n        };\n    }\n\n    // show custom error message if file name is incorrect\n    if (\n        validationResult.elementName === 'Contestant-Picture'\n        && validationResult.value.file\n        && !validationResult.value.file.name.includes('smoky-with-beer')\n    ) {\n        return {\n            errorMessage: 'Please upload a file with a name that includes \"smoky-with-beer\"',\n        };\n    }\n};\n\n/**\n * Form\n *\n * NOTE: It's recommended to use a Class component as it's easier to use instance methods\n * as props for on[Event] functions which do not cause unnecessary PureComponent rendering farther down.\n * InputRenderer caches (and updates if changed) other props where necessary (e.g. inputProps).\n */\nclass Form extends Component {\n    // set some initial state values\n    compiledTemplate = Openlaw.compileTemplate(SampleTemplateText).compiledTemplate;\n    initialExecutionResult = Openlaw.execute(this.compiledTemplate, {}, {}, getExternalCallStructures()).executionResult;\n    initialVariables = Openlaw.getExecutedVariables(this.initialExecutionResult, {});\n    inputExtraTextMap = {\n        \"Full Name\": () => <>What's your name, bra?</>\n    };\n\n\n    state = {\n        executionResult: this.initialExecutionResult,\n        parameters: {},\n        variables: this.initialVariables,\n        activeIndex: 0\n    };\n\n    componentDidMount() {\n        this.props.stateLifter(this.state);\n    }\n\n    onElementChange = (key, value, validationResult) => {\n        const {parameters} = this.state;\n        // value needs to be unset, and the current paramter value is not already unset\n        const shouldSetNewValue =\n            (value === undefined && parameters[key] !== undefined)\n                ? true\n                // things are looking reallllly good\n                : (!validationResult.isError && value !== parameters[key])\n                ? true\n                // default\n                : false;\n\n        if (!shouldSetNewValue) return;\n\n        const {stateLifter} = this.props;\n\n        const mergedParameters = {...parameters, [key]: value};\n        const {executionResult, errorMessage} = Openlaw.execute(this.compiledTemplate, {}, mergedParameters, getExternalCallStructures());\n\n        if (errorMessage) {\n            // eslint-disable-next-line no-undef\n            console.error('Openlaw Execution Error:', errorMessage);\n            return;\n        }\n\n        this.setState({\n            executionResult,\n            parameters: mergedParameters,\n            variables: Openlaw.getExecutedVariables(executionResult, {}),\n        }, () => {\n            stateLifter(this.state);\n        });\n    };\n\n    setActiveIndex = value => this.setState({activeIndex: value});\n\n    SectionsRendererInjecter() {\n        let {activeIndex} = this.state;\n        let setActiveIndex = this.setActiveIndex;\n\n        return (props) => (\n            <SectionsRenderer\n                activeIndex={activeIndex}\n                setActiveIndex={setActiveIndex}\n                {...props}\n            />\n        );\n    }\n\n    render() {\n        const {executionResult, parameters, variables} = this.state;\n\n        return (\n            <>\n                {Object.keys(executionResult).length && (\n                    <>\n                        <OpenLawForm\n                            apiClient={apiClientSingleton}\n                            executionResult={executionResult}\n                            inputExtraTextMap={this.inputExtraTextMap}\n                            parameters={parameters}\n                            onChangeFunction={this.onElementChange}\n                            onValidate={onValidate}\n                            openLaw={Openlaw}\n                            renderSections={this.SectionsRendererInjecter()}\n                            sectionTransform={(sectionName, index) => {\n                                // Transform & shape your custom sections here!\n                                // See <SectionsRenderer /> for usage.\n                                return {sectionName, index};\n                            }}\n                            unsectionedTitle=\"\" // none, don't create a section\n                            variables={variables}\n                        />\n                    </>\n                )}\n            </>\n        );\n    }\n}\n\nexport default Form;\n","import React, {useEffect, useState} from 'react';\nimport {Openlaw} from 'openlaw';\nimport Form from './Form';\nimport \"./App.css\";\n\n\n/**\n * Example app showing how you can render `OpenLawForm`\n * with a valid OpenLaw template. In this app, we have a\n * static template, meaning in this context\n * that it is not able to be edited by the user within the app.\n */\n\nconst renderPreviewHTML = (formState, callback) => () => {\n    const {executionResult} = formState;\n    const {agreement} = Openlaw.getAgreements(executionResult)[0];\n\n    callback(Openlaw.renderForPreview(agreement, {}, {}));\n};\n\nconst App = () => {\n    const [formState, liftFormState] = useState();\n    const [previewHTML, setPreviewHTML] = useState();\n    const [view, toggleView] = useState('source');\n\n    useEffect(() => {\n        if (formState) {\n            renderPreviewHTML(formState, setPreviewHTML)();\n            toggleView('preview');\n        }\n    }, [formState]);\n\n    return (\n        <>\n            <div className=\"paneLeft\">\n                <Form\n                    stateLifter={liftFormState}\n                />\n            </div>\n\n            {/* PREVIEW */}\n            <div className=\"document-view paper\">\n                {(previewHTML && view === 'preview') && (\n                    <div dangerouslySetInnerHTML={{__html: previewHTML}}/>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { attemptAuth } from './auth';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nattemptAuth();\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}